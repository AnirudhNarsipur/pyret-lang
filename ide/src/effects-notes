Want to have explicit 'Run' and 'Compile' buttons

InitCompile:
  queue Save => CompileSaveSuccess, CompileSaveFailure
  handle CompileSaveSuccess:
    queue Compile => CompileSuccess, CompileFailure
  handle CompileSaveFailure:
    notify user
  handle CompileSuccess:
    notify user
  handle CompileFailure:
    notify user

InitCompileRun:
  queue Save => CompileRunSaveSuccess, CompileRunSaveFailure
  handle CompileRunSaveSuccess:
    queue CompileThenRun => CompileThenRunSuccess, CompileThenRunFailure
  handle CompileRunSaveFailure:
    notify user
  handle CompileThenRunSuccess
    queue run => RunSuccess, RunFailure
  handle CompileThenRunFailure
    notify user
  handle RunSuccess
    notify user
  handle RunFailure
    notify user


OnCompileClick:
  if AutoRun:
    queue InitCompileRun
  else:
    queue InitCompile

OnRunClick:
  queue InitCompileRun

handle EditTimerSuccess
  if AutoCompile:
    queue InitCompile
  else if AutoCompileRun
    queue InitCompileRun


User "Compile":
  saveFile => OnSuccess { notify; queue DispatchjBackendCmd("compile") }; OnFailure { notify }

User "Run":
  saveFile => OnSuccess { notify; queue DispatchBackendCmd("run") }; OnFailure { notify }

handle DispatchBackendCmds(cmd):
  if Idle or Done:
    state.currentCmd = cmd
  state.
  state.fsmState = Linting
  queue Lint

handle LintSuccess:
  if compile(state.currentCmd):
    state.fsmState = Compiling
    queue Compile
  else
    handle CommandSuccess

handle LintFailure:
  handle BackendFailure

handle CompileSuccess
  if run(state.currentCmd):
    state.fsmState = running
    queue Run
  else
    handle CommandSuccess

handle CompileFailure:
  notify
  handle BackendFailure

handle RunSuccess:
  handle CommandSuccess

handle RunFailure:
  notify
  handle CommandFailure

handle CommandSuccess:
  state.fsmState = Done
  state.currentCmd = None
  notify

handle CommandFailure:
  state.fsmState = Done
  state.currentCmd = None


Backend State {
  currentCmd: BackendCmd?,
  fsmState: BackendFSMState,
}

BackendFSMState {
  Idle
  Linting
  Compiling
  Running
  Done
}


compile() {
  saveFile()?
  lint()?
  compile()?
}

run() {
  saveFile()?
  lint?
  compile?
}

Effect = BackendEffect | FrontEnd

FrontEnd {
  { tag: ... }
  { tag: 'saveFile', payload: BackendCommand | null }
}

BackendEffect {
  | { tag: 'lint', payload: BackendCommand }
  | { tag: 'compile', payload: BackendCommand }
  | { tag: 'run', payload: undefined }
}

BackendCommand {
  Lint = 0,
  Compile = 1,
  Run = 2,
}

handle lint(backendCommand: BackendCommand) {
  result = lint()
  if result.success {
    dispatch(lintSuccess);
    if (backendCommand > BackendCommand.Lint) {
      dispatch(compile(backendCommand));
    }
  } else {
    dispatch(lintFailure);
  }
}
